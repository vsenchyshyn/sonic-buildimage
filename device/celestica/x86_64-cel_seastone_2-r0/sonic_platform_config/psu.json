{
    "psu_num": 2,
    "fan_per_psu_num": 1,
    "get_name": {
        "output_source": "value_list",
        "value_list": [
            "PSU-R",
            "PSU-L"
        ]
    },
    "get_power": {
        "output_source": "ipmitool",
        "command": "ipmitool sdr | grep {}",
        "argument": [
            "PSUR_POut",
            "PSUL_POut"
        ],
        "output_translator": "float('{}'.split()[2])"
    },
    "get_current": {
        "output_source": "ipmitool",
        "command": "ipmitool sdr | grep {}",
        "argument": [
            "PSUR_COut",
            "PSUL_COut"
        ],
        "output_translator": "float('{}'.split()[2])"
    },
    "get_voltage": {
        "output_source": "ipmitool",
        "command": "ipmitool sdr | grep {}",
        "argument": [
            "PSUR_VOut",
            "PSUL_VOut"
        ],
        "output_translator": "float('{}'.split()[2])"
    },
    "get_voltage_high_threshold": {
        "output_source": "ipmitool",
        "command": "ipmitool sensor list | grep {}",
        "argument": [
            "PSUR_Temp2",
            "PSUL_Temp2"
        ],
        "output_translator": "float(0 if '{0}'.split()[-3]=='na' else '{0}'.split()[-3])"
    },
    "get_voltage_low_threshold": {
        "output_source": "ipmitool",
        "command": "ipmitool sensor list | grep {}",
        "argument": [
            "PSUR_Temp2",
            "PSUL_Temp2"
        ],
        "output_translator": "float(0 if '{0}'.split()[-9]=='na' else '{0}'.split()[-9])"
    },
    "get_presence": {
        "output_source": "ipmitool",
        "command": "ipmitool raw 0x3a 0x0c 0x00 0x2 0x60",
        "output_translator": [
            "True if (int('{}', 16) >> 4 & 1) == 0 else False",
            "True if (int('{}', 16) >> 5 & 1) == 0 else False"
        ]
    },
    "get_model": {
        "output_source": "ipmitool",
        "command": "ipmitool fru list {} | grep 'Product Part Number'",
        "argument": [
            "4",
            "3"
        ],
        "output_translator": "'{}'.split()[-1]"
    },
    "get_serial": {
        "output_source": "ipmitool",
        "command": "ipmitool fru list {} | grep 'Product Serial'",
        "argument": [
            "4",
            "3"
        ],
        "output_translator": "'{}'.split()[-1]"
    },
    "get_powergood_status": {
        "output_source": "ipmitool",
        "command": "ipmitool raw 0x3a 0x0c 0x0 0x2 0x60",
        "output_translator": [
            "True if (int('{}', 16) >> 2 & 1) == 1 else False",
            "True if (int('{}', 16) >> 3 & 1) == 1 else False"
        ]
    },
    "set_status_led": {
        "set_method": "ipmitool",
        "avaliable_input": [
            "amber"
        ],
        "input_translator": {
            "amber": "0x1"
        },
        "command": "ipmitool raw 0x3a 0x0a {}",
        "argument": [
            "0x3 {}",
            "0x2 {}"
        ]
    },
    "get_status_led": {
        "output_source": "ipmitool",
        "command": "ipmitool raw 0x3a 0x0b {}",
        "argument": [
            "0x3",
            "0x2"
        ],
        "output_translator": {
            "00": "green",
            "01": "amber"
        },
        "default_output": "off"
    },
    "get_temperature": {
        "output_source": "ipmitool",
        "command": "ipmitool sdr | grep {}",
        "argument": [
            "PSUR_Temp2",
            "PSUL_Temp2"
        ],
        "output_translator": "float('{}'.split()[2])"
    },
    "get_temperature_high_threshold": {
        "output_source": "ipmitool",
        "command": "ipmitool sensor list | grep {}",
        "argument": [
            "PSUR_Temp2",
            "PSUL_Temp2"
        ],
        "output_translator": "float(0 if '{0}'.split()[-3]=='na' else '{0}'.split()[-3])"
    }
}